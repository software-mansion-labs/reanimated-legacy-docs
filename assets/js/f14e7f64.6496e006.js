"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[4954],{7217:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={id:"interpolate",title:"Interpolate",sidebar_label:"Interpolate"},i=void 0,l={unversionedId:"api/miscellaneous/interpolate",id:"api/miscellaneous/interpolate",title:"Interpolate",description:"Sometimes you need to map a value from one range to another. This is where you should use the interpolate function which approximates values between points in the output range and lets you map a value inside the input range to a corresponding approximation in the output range. It also supports a few types of Extrapolation to enable mapping outside the range.",source:"@site/docs/api/miscellaneous/interpolate.md",sourceDirName:"api/miscellaneous",slug:"/api/miscellaneous/interpolate",permalink:"/react-native-reanimated/docs/api/miscellaneous/interpolate",draft:!1,tags:[],version:"current",frontMatter:{id:"interpolate",title:"Interpolate",sidebar_label:"Interpolate"},sidebar:"docs",previous:{title:"getRelativeCoords",permalink:"/react-native-reanimated/docs/api/miscellaneous/getRelativeCoords"},next:{title:"runOnJS",permalink:"/react-native-reanimated/docs/api/miscellaneous/runOnJS"}},p={},s=[{value:"Arguments",id:"arguments",level:3},{value:"<code>value</code> Float",id:"value-float",level:4},{value:"<code>input range</code> [Float[]]",id:"input-range-float",level:4},{value:"<code>output range</code> [Float[]]",id:"output-range-float",level:4},{value:"<code>extrapolation type</code> Object | String",id:"extrapolation-type-object--string",level:4},{value:"Returns",id:"returns",level:3},{value:"Example",id:"example",level:2}],u={toc:s};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Sometimes you need to map a value from one range to another. This is where you should use the ",(0,o.kt)("inlineCode",{parentName:"p"},"interpolate")," function which approximates values between points in the output range and lets you map a value inside the input range to a corresponding approximation in the output range. It also supports a few types of Extrapolation to enable mapping outside the range."),(0,o.kt)("h3",{id:"arguments"},"Arguments"),(0,o.kt)("h4",{id:"value-float"},(0,o.kt)("inlineCode",{parentName:"h4"},"value")," ","[Float]"),(0,o.kt)("p",null,"Value from within the input range that should be mapped to a value from the output range."),(0,o.kt)("h4",{id:"input-range-float"},(0,o.kt)("inlineCode",{parentName:"h4"},"input range")," [Float[]]"),(0,o.kt)("p",null,"An array of Floats that contains points that indicate the range of the input value. Values in the input range should be increasing."),(0,o.kt)("h4",{id:"output-range-float"},(0,o.kt)("inlineCode",{parentName:"h4"},"output range")," [Float[]]"),(0,o.kt)("p",null,"An array of Floats that contains points that indicate the range of the output value. It should have at least the same number of points as the input range."),(0,o.kt)("h4",{id:"extrapolation-type-object--string"},(0,o.kt)("inlineCode",{parentName:"h4"},"extrapolation type")," ","[Object | String]"),(0,o.kt)("p",null,"Can be either an object or a string. If an object is passed it should specify extrapolation explicitly for the right and left sides. If extrapolation for a side is not provided, it defaults to ",(0,o.kt)("inlineCode",{parentName:"p"},"Extrapolation.EXTEND"),". Example extrapolation type object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const extrapolation = {\n    extrapolateLeft: Extrapolation.CLAMP,\n    extrapolateRight: Extrapolation.IDENTITY\n}\n")),(0,o.kt)("p",null,"If a string is provided, the provided extrapolation type is applied to both sides."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Available extrapolation types:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Extrapolation.CLAMP")," - clamps the value to the edge of the output range"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Extrapolation.IDENTITY")," - returns the value that is being interpolated"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Extrapolation.EXTEND")," - approximates the value even outside of the range")),(0,o.kt)("p",{parentName:"admonition"},"Available extrapolation string values:"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"clamp")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"identity")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"extend")))),(0,o.kt)("h3",{id:"returns"},"Returns"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"interpolate")," returns the value after interpolation from within the output range."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\nimport Animated, {\n  useSharedValue,\n  useAnimatedScrollHandler,\n  useAnimatedStyle,\n  interpolate,\n} from 'react-native-reanimated';\n\nexport const HEADER_IMAGE_HEIGHT = Dimensions.get('window').width / 3;\n\nexport default function Test() {\n  const scrollY = useSharedValue(0);\n  const scrollHandler = useAnimatedScrollHandler({\n    onScroll: (e) => {\n      scrollY.value = e.contentOffset.y;\n    },\n  });\n  const animatedStyles = useAnimatedStyle(() => {\n    const scale = interpolate(scrollY.value, [-100, 0], [2, 1], { extrapolateRight: Extrapolation.CLAMP });\n\n    return {\n      transform: [{ scale: scale }],\n    };\n  });\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center' }}>\n      <Animated.View\n        style={[\n          {\n            position: 'absolute',\n            top: 20,\n            left: 0,\n            width: 20,\n            height: 20,\n            backgroundColor: 'blue',\n          },\n          animatedStyles,\n        ]}\n      />\n\n      <Animated.ScrollView\n        style={StyleSheet.absoluteFill}\n        onScroll={scrollHandler}></Animated.ScrollView>\n    </View>\n  );\n}\n")))}c.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);