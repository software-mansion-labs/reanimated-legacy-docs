"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[1776],{1946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={id:"event",title:"Event handling with reanimated nodes",sidebar_label:"Event handling"},o=void 0,s={unversionedId:"event",id:"version-1.x/event",title:"Event handling with reanimated nodes",description:"react-native-reanimated's new syntax is possible to be used with Animated.event. Instead of providing only a mapping from event fields to animated nodes, it is allowed to write a function that takes reanimated values map as an input and return a block (or any other reanimated function) that will be then used to handle the event.",source:"@site/versioned_docs/version-1.x/event.md",sourceDirName:".",slug:"/event",permalink:"/react-native-reanimated/docs/1.x/event",draft:!1,tags:[],version:"1.x",frontMatter:{id:"event",title:"Event handling with reanimated nodes",sidebar_label:"Event handling"},sidebar:"version-1.x/docs",previous:{title:"set",permalink:"/react-native-reanimated/docs/1.x/nodes/set"},next:{title:"View, Props, etc",permalink:"/react-native-reanimated/docs/1.x/view"}},l={},d=[],p={toc:d};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"react-native-reanimated"),"'s new syntax is possible to be used with ",(0,r.kt)("inlineCode",{parentName:"p"},"Animated.event"),". Instead of providing only a mapping from event fields to animated nodes, it is allowed to write a function that takes reanimated values map as an input and return a block (or any other reanimated function) that will be then used to handle the event."),(0,r.kt)("p",null,"This syntax allows for providing some post-processing for the event data that does not fit well as a dependency of other nodes we connect to ",(0,r.kt)("inlineCode",{parentName:"p"},"Animated.View")," component props. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/software-mansion/react-native-reanimated/blob/main/Example/reanimated1/PanRotateAndZoom/index.js#L25"},"See example")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import { event, set } from 'react-native-reanimated'\n\nthis.onGestureEvent = event([\n  {\n    nativeEvent: {\n      translationX: x => set(this._x, x),\n    },\n  },\n]);\n")),(0,r.kt)("p",null,"If you'd like to use more than one event attribute in your reanimated code, this is also supported. Instead of defining event handler methods for a single attribute you can define at the level of ",(0,r.kt)("inlineCode",{parentName:"p"},"nativeEvent"),". Here is an example that takes both translation attributes and state attribute from ",(0,r.kt)("inlineCode",{parentName:"p"},"PanGestureHandler")," event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"<PanGestureHandler\n  onGestureEvent={event([\n    {\n      nativeEvent: ({ translationX: x, translationY: y, state }) =>\n        block([\n          set(this._transX, add(x, offsetX)),\n          set(this._transY, add(y, offsetY)),\n          cond(eq(state, State.END), [\n            set(this.offsetX, add(this.offsetX, x)),\n            set(this.offsetY, add(this.offsetY, y)),\n          ]),\n        ]),\n    },\n  ])}>\n  <Animated.View\n    style={{\n      transform: [{ translateX: this._transX, translateY: this._transY }],\n    }}\n  />\n</PanGestureHandler>\n")))}c.isMDXComponent=!0},3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,f=m["".concat(l,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);