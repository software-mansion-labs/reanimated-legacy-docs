"use strict";(self.webpackChunkreact_native_reanimated_docs=self.webpackChunkreact_native_reanimated_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"3.x","banner":null,"badge":true,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"category","label":"Fundamentals","items":[{"type":"link","label":"About","href":"/react-native-reanimated/docs/","docId":"fundamentals/about"},{"type":"link","label":"Installation","href":"/react-native-reanimated/docs/fundamentals/installation","docId":"fundamentals/installation"},{"type":"link","label":"Worklets","href":"/react-native-reanimated/docs/fundamentals/worklets","docId":"fundamentals/worklets"},{"type":"link","label":"Shared Values","href":"/react-native-reanimated/docs/fundamentals/shared-values","docId":"fundamentals/shared-values"},{"type":"link","label":"Animations","href":"/react-native-reanimated/docs/fundamentals/animations","docId":"fundamentals/animations"},{"type":"link","label":"Events","href":"/react-native-reanimated/docs/fundamentals/events","docId":"fundamentals/events"},{"type":"link","label":"Custom Events","href":"/react-native-reanimated/docs/fundamentals/custom_events","docId":"fundamentals/custom_events"},{"type":"link","label":"Layout Animations","href":"/react-native-reanimated/docs/fundamentals/layout_animations","docId":"fundamentals/layout_animations"},{"type":"link","label":"Architecture","href":"/react-native-reanimated/docs/fundamentals/architecture","docId":"fundamentals/architecture"},{"type":"link","label":"Web Support","href":"/react-native-reanimated/docs/fundamentals/web-support","docId":"fundamentals/web-support"},{"type":"link","label":"Troubleshooting","href":"/react-native-reanimated/docs/fundamentals/troubleshooting","docId":"fundamentals/troubleshooting"}],"collapsed":true,"collapsible":true},{"type":"category","label":"API Reference","items":[{"type":"category","label":"Animations","items":[{"type":"link","label":"cancelAnimation","href":"/react-native-reanimated/docs/api/animations/cancelAnimation","docId":"api/animations/cancelAnimation"},{"type":"link","label":"withDecay","href":"/react-native-reanimated/docs/api/animations/withDecay","docId":"api/animations/withDecay"},{"type":"link","label":"withDelay","href":"/react-native-reanimated/docs/api/animations/withDelay","docId":"api/animations/withDelay"},{"type":"link","label":"withRepeat","href":"/react-native-reanimated/docs/api/animations/withRepeat","docId":"api/animations/withRepeat"},{"type":"link","label":"withSequence","href":"/react-native-reanimated/docs/api/animations/withSequence","docId":"api/animations/withSequence"},{"type":"link","label":"withSpring","href":"/react-native-reanimated/docs/api/animations/withSpring","docId":"api/animations/withSpring"},{"type":"link","label":"withTiming","href":"/react-native-reanimated/docs/api/animations/withTiming","docId":"api/animations/withTiming"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Hooks","items":[{"type":"link","label":"useAnimatedGestureHandler","href":"/react-native-reanimated/docs/api/hooks/useAnimatedGestureHandler","docId":"api/hooks/useAnimatedGestureHandler"},{"type":"link","label":"useAnimatedKeyboard","href":"/react-native-reanimated/docs/api/hooks/useAnimatedKeyboard","docId":"api/hooks/useAnimatedKeyboard"},{"type":"link","label":"useAnimatedProps","href":"/react-native-reanimated/docs/api/hooks/useAnimatedProps","docId":"api/hooks/useAnimatedProps"},{"type":"link","label":"useAnimatedReaction","href":"/react-native-reanimated/docs/api/hooks/useAnimatedReaction","docId":"api/hooks/useAnimatedReaction"},{"type":"link","label":"useAnimatedRef","href":"/react-native-reanimated/docs/api/hooks/useAnimatedRef","docId":"api/hooks/useAnimatedRef"},{"type":"link","label":"useAnimatedScrollHandler","href":"/react-native-reanimated/docs/api/hooks/useAnimatedScrollHandler","docId":"api/hooks/useAnimatedScrollHandler"},{"type":"link","label":"useAnimatedSensor","href":"/react-native-reanimated/docs/api/hooks/useAnimatedSensor","docId":"api/hooks/useAnimatedSensor"},{"type":"link","label":"useAnimatedStyle","href":"/react-native-reanimated/docs/api/hooks/useAnimatedStyle","docId":"api/hooks/useAnimatedStyle"},{"type":"link","label":"useDerivedValue","href":"/react-native-reanimated/docs/api/hooks/useDerivedValue","docId":"api/hooks/useDerivedValue"},{"type":"link","label":"useEvent","href":"/react-native-reanimated/docs/api/hooks/useEvent","docId":"api/hooks/useEvent"},{"type":"link","label":"useFrameCallback","href":"/react-native-reanimated/docs/api/hooks/useFrameCallback","docId":"api/hooks/useFrameCallback"},{"type":"link","label":"useHandler","href":"/react-native-reanimated/docs/api/hooks/useHandler","docId":"api/hooks/useHandler"},{"type":"link","label":"useScrollViewOffset","href":"/react-native-reanimated/docs/api/hooks/useScrollViewOffset","docId":"api/hooks/useScrollViewOffset"},{"type":"link","label":"useSharedValue","href":"/react-native-reanimated/docs/api/hooks/useSharedValue","docId":"api/hooks/useSharedValue"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Layout Animations","items":[{"type":"link","label":"Custom Animations","href":"/react-native-reanimated/docs/api/LayoutAnimations/customAnimations","docId":"api/LayoutAnimations/customAnimations"},{"type":"link","label":"Entering Animations","href":"/react-native-reanimated/docs/api/LayoutAnimations/entryAnimations","docId":"api/LayoutAnimations/entryAnimations"},{"type":"link","label":"Exiting Animations","href":"/react-native-reanimated/docs/api/LayoutAnimations/exitAnimations","docId":"api/LayoutAnimations/exitAnimations"},{"type":"link","label":"Keyframe Animations","href":"/react-native-reanimated/docs/api/LayoutAnimations/keyframeAnimations","docId":"api/LayoutAnimations/keyframeAnimations"},{"type":"link","label":"Layout Transitions","href":"/react-native-reanimated/docs/api/LayoutAnimations/layoutTransitions","docId":"api/LayoutAnimations/layoutTransitions"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Shared Element Transitions","href":"/react-native-reanimated/docs/api/sharedElementTransitions","docId":"api/sharedElementTransitions"},{"type":"category","label":"Native methods","items":[{"type":"link","label":"measure","href":"/react-native-reanimated/docs/api/nativeMethods/measure","docId":"api/nativeMethods/measure"},{"type":"link","label":"scrollTo","href":"/react-native-reanimated/docs/api/nativeMethods/scrollTo","docId":"api/nativeMethods/scrollTo"},{"type":"link","label":"dispatchCommand","href":"/react-native-reanimated/docs/api/nativeMethods/dispatchCommand","docId":"api/nativeMethods/dispatchCommand"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Miscellaneous","items":[{"type":"link","label":"getRelativeCoords","href":"/react-native-reanimated/docs/api/miscellaneous/getRelativeCoords","docId":"api/miscellaneous/getRelativeCoords"},{"type":"link","label":"Interpolate","href":"/react-native-reanimated/docs/api/miscellaneous/interpolate","docId":"api/miscellaneous/interpolate"},{"type":"link","label":"runOnJS","href":"/react-native-reanimated/docs/api/miscellaneous/runOnJS","docId":"api/miscellaneous/runOnJS"},{"type":"link","label":"runOnUI","href":"/react-native-reanimated/docs/api/miscellaneous/runOnUI","docId":"api/miscellaneous/runOnUI"},{"type":"link","label":"interpolateColor","href":"/react-native-reanimated/docs/api/miscellaneous/interpolateColors","docId":"api/miscellaneous/interpolateColors"}],"collapsed":true,"collapsible":true}],"collapsed":true,"collapsible":true},{"type":"category","label":"Guides","items":[{"type":"link","label":"Testing with Jest","href":"/react-native-reanimated/docs/guide/testing","docId":"guide/testing"},{"type":"link","label":"Debugging worklets","href":"/react-native-reanimated/docs/guide/debugging","docId":"guide/debugging"},{"type":"link","label":"Migration from 1.x","href":"/react-native-reanimated/docs/guide/migration-from-1.x","docId":"guide/migration-from-1.x"},{"type":"link","label":"Migration from 2.x","href":"/react-native-reanimated/docs/guide/migration-from-2.x","docId":"guide/migration-from-2.x"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Tutorials","items":[{"type":"link","label":"Layout Animations","href":"/react-native-reanimated/docs/tutorials/LayoutAnimations/layoutAnimations","docId":"tutorials/LayoutAnimations/layoutAnimations"}],"collapsed":true,"collapsible":true},{"type":"link","label":"Community","href":"/react-native-reanimated/docs/community","docId":"community"}]},"docs":{"api/animations/cancelAnimation":{"id":"api/animations/cancelAnimation","title":"cancelAnimation","description":"Cancels animation linked to given shared value.","sidebar":"docs"},"api/animations/withDecay":{"id":"api/animations/withDecay","title":"withDecay","description":"Starts a velocity based \\"scroll\\" animation.","sidebar":"docs"},"api/animations/withDelay":{"id":"api/animations/withDelay","title":"withDelay","description":"Allows for the provided animation to start with a specified delay.","sidebar":"docs"},"api/animations/withRepeat":{"id":"api/animations/withRepeat","title":"withRepeat","description":"Repeats the provided animation several times.","sidebar":"docs"},"api/animations/withSequence":{"id":"api/animations/withSequence","title":"withSequence","description":"Runs the provided animations in a sequence.","sidebar":"docs"},"api/animations/withSpring":{"id":"api/animations/withSpring","title":"withSpring","description":"Starts a spring-based animation.","sidebar":"docs"},"api/animations/withTiming":{"id":"api/animations/withTiming","title":"withTiming","description":"Starts a time based animation.","sidebar":"docs"},"api/hooks/useAnimatedGestureHandler":{"id":"api/hooks/useAnimatedGestureHandler","title":"useAnimatedGestureHandler","description":"This hook allows for defining worklet handlers that can serve in a process of handling gestures.","sidebar":"docs"},"api/hooks/useAnimatedKeyboard":{"id":"api/hooks/useAnimatedKeyboard","title":"useAnimatedKeyboard","description":"Android implementation of useAnimatedKeyboard is an experimental feature.","sidebar":"docs"},"api/hooks/useAnimatedProps":{"id":"api/hooks/useAnimatedProps","title":"useAnimatedProps","description":"This hook is a counterpart of useAnimatedStyle hook, but works for a non-style view properties.","sidebar":"docs"},"api/hooks/useAnimatedReaction":{"id":"api/hooks/useAnimatedReaction","title":"useAnimatedReaction","description":"useAnimatedReaction hook allows performing certain actions on some shared values\' change. The key idea is, all of the shared values included in the first worklet are the inputs set. Every time any of those change both worklets are triggered in the order specified above. Also the second worklet may modify any shared values excluding those used in the first worklet.","sidebar":"docs"},"api/hooks/useAnimatedRef":{"id":"api/hooks/useAnimatedRef","title":"useAnimatedRef","description":"This hook provides extended functionality of a standard ref. You can assign it to some component like ` and then access the target component via animatedRef.current. Besides, on the UI thread animated reference also contains the view tag of the target. It can be accessed like this: const viewTag = animatedRef(). This comes handy when using native methods like scrollTo and measure`.","sidebar":"docs"},"api/hooks/useAnimatedScrollHandler":{"id":"api/hooks/useAnimatedScrollHandler","title":"useAnimatedScrollHandler","description":"This is a convenience hook that returns an event handler reference which can be used with React Native\'s scrollable components.","sidebar":"docs"},"api/hooks/useAnimatedSensor":{"id":"api/hooks/useAnimatedSensor","title":"useAnimatedSensor","description":"With the useAnimatedSensor hook, you can easily create cool interactive animations based on data from sensors in the device such as gyroscope, accelerometer etc.","sidebar":"docs"},"api/hooks/useAnimatedStyle":{"id":"api/hooks/useAnimatedStyle","title":"useAnimatedStyle","description":"This hook is one of the main elements of the new Reanimated v2 API.","sidebar":"docs"},"api/hooks/useDerivedValue":{"id":"api/hooks/useDerivedValue","title":"useDerivedValue","description":"This hook allows for creating shared value reference that can change in response to updating of one or more other shared values.","sidebar":"docs"},"api/hooks/useEvent":{"id":"api/hooks/useEvent","title":"useEvent","description":"This is low-level hook returning event handler that will be invoked with native events, which should be used in order to create custom event handler hook like useAnimatedGestureHandler or useAnimatedScrollHandler.","sidebar":"docs"},"api/hooks/useFrameCallback":{"id":"api/hooks/useFrameCallback","title":"useFrameCallback","description":"This hook allows you to run a piece of code on every frame update.","sidebar":"docs"},"api/hooks/useHandler":{"id":"api/hooks/useHandler","title":"useHandler","description":"This is low-level hook returning context object and value indicating whether worklet should be rebuilt, which should be used in order to create custom event handler hook like useAnimatedGestureHandler or useAnimatedScrollHandler.","sidebar":"docs"},"api/hooks/useScrollViewOffset":{"id":"api/hooks/useScrollViewOffset","title":"useScrollViewOffset","description":"This hook allows you to create animations based on the offset of a ScrollView.","sidebar":"docs"},"api/hooks/useSharedValue":{"id":"api/hooks/useSharedValue","title":"useSharedValue","description":"Use this hook to create a reference to a JavaScript value that can be shared with worklets.","sidebar":"docs"},"api/LayoutAnimations/customAnimations":{"id":"api/LayoutAnimations/customAnimations","title":"Custom Animations","description":"If our set of predefined animations is not enough for you then this tab is what you are looking for.","sidebar":"docs"},"api/LayoutAnimations/entryAnimations":{"id":"api/LayoutAnimations/entryAnimations","title":"Entering Animations","description":"In React Native every component appears instantly whenever you add it to the component hierarchy. It\'s not something we are used to in the real world. Layout Animations are here to address the problem and help you animate an appearance of any view.","sidebar":"docs"},"api/LayoutAnimations/exitAnimations":{"id":"api/LayoutAnimations/exitAnimations","title":"Exiting Animations","description":"In React Native during unmounting of components from the hierarchy of views, it just disappears in the next frame. However you can beautify this process using Exiting Animations. Reanimated make a pretty animation of disappearing of component for you.","sidebar":"docs"},"api/LayoutAnimations/keyframeAnimations":{"id":"api/LayoutAnimations/keyframeAnimations","title":"Keyframe Animations","description":"The document explains how you can define complex animation using simple and popular animation definitions schema - Keyframes.","sidebar":"docs"},"api/LayoutAnimations/layoutTransitions":{"id":"api/LayoutAnimations/layoutTransitions","title":"Layout Transitions","description":"The document explains how can you animate all layout changes for a specific view just by adding a single property to the view.","sidebar":"docs"},"api/miscellaneous/getRelativeCoords":{"id":"api/miscellaneous/getRelativeCoords","title":"getRelativeCoords","description":"Determines the location on the screen, relative to the given view. It might be useful when there are only absolute coordinates available and you need coordinates relative to the parent.","sidebar":"docs"},"api/miscellaneous/interpolate":{"id":"api/miscellaneous/interpolate","title":"Interpolate","description":"Sometimes you need to map a value from one range to another. This is where you should use the interpolate function which approximates values between points in the output range and lets you map a value inside the input range to a corresponding approximation in the output range. It also supports a few types of Extrapolation to enable mapping outside the range.","sidebar":"docs"},"api/miscellaneous/interpolateColors":{"id":"api/miscellaneous/interpolateColors","title":"interpolateColor","description":"Maps input range to output colors using linear interpolation. It works just like interpolate function but the output is color string in rgba(r, g, b, a) notation.","sidebar":"docs"},"api/miscellaneous/runOnJS":{"id":"api/miscellaneous/runOnJS","title":"runOnJS","description":"When you call a function on the UI thread you can\'t be sure if you\'re calling a worklet or a callback from the JS thread. To make it more transparent we introduced runOnJS, which calls a callback asynchronously. An exception will be thrown if you call a JS callback without this function.","sidebar":"docs"},"api/miscellaneous/runOnUI":{"id":"api/miscellaneous/runOnUI","title":"runOnUI","description":"Enables executing worklet functions on the UI thread. Note that UI execution is asynchronous from the caller\u2019s perspective. When you pass arguments, they will be copied to the UI context.","sidebar":"docs"},"api/nativeMethods/dispatchCommand":{"id":"api/nativeMethods/dispatchCommand","title":"dispatchCommand","description":"Allows to dispatch command on a native component synchronously from the UI thread.","sidebar":"docs"},"api/nativeMethods/measure":{"id":"api/nativeMethods/measure","title":"measure","description":"Determines the location on screen, width, and height in the viewport of the given view synchronously and returns an object with measured dimensions or null if the view cannot be measured.","sidebar":"docs"},"api/nativeMethods/scrollTo":{"id":"api/nativeMethods/scrollTo","title":"scrollTo","description":"Provides synchronous scroll on the UI thread to a given offset using an animated ref to a scroll view. This allows performing smooth scrolling without lags (which might have otherwise occurred when it was asynchronous and based on lots of events).","sidebar":"docs"},"api/sharedElementTransitions":{"id":"api/sharedElementTransitions","title":"Shared Element Transitions","description":"Shared Element Transitions is an experimental feature, not recommended for production use yet. We are waiting for your feedback to improve implementation.","sidebar":"docs"},"community":{"id":"community","title":"Community","description":"Reanimated community is the best! \ud83c\udf89  We want to say thank you to all community users, and we really appreciate all your activity and commitment. Yours PR, reported issues and many discussions help us in our daily work and it motivates us to develop Reanimated!","sidebar":"docs"},"fundamentals/about":{"id":"fundamentals/about","title":"About React Native Reanimated","description":"This is a documentation website of Reanimated 3.x release.","sidebar":"docs"},"fundamentals/animations":{"id":"fundamentals/animations","title":"Animations","description":"Animations are first-class citizens in Reanimated.","sidebar":"docs"},"fundamentals/architecture":{"id":"fundamentals/architecture","title":"Reanimated\'s 2.x architecture","description":"Due to time constraints we weren\'t able to finish this page.","sidebar":"docs"},"fundamentals/custom_events":{"id":"fundamentals/custom_events","title":"Custom Events","description":"Apart from gestures and scroll events, Reanimated exposes a low-level API to create custom animated event handlers for custom animated components. With this API you can create handler hooks similar to the useAnimatedGestureHandler and useAnimatedScrollHandler.","sidebar":"docs"},"fundamentals/events":{"id":"fundamentals/events","title":"Events","description":"In the real world nothing changes instantly\u2013there is always something between the states. When we touch a book we don\'t expect it to open instantly on a certain page. To make mobile apps feel more natural to the user, we use animations to smoothen out user interactions with the app user interface.","sidebar":"docs"},"fundamentals/installation":{"id":"fundamentals/installation","title":"Installation","description":"Installing Reanimated requires a couple of additional steps compared to installing most of the popular react-native packages.","sidebar":"docs"},"fundamentals/layout_animations":{"id":"fundamentals/layout_animations","title":"Layout Animations","description":"Layout Animations - the easiest way to animate the entering/exiting/layout of your components.","sidebar":"docs"},"fundamentals/shared-values":{"id":"fundamentals/shared-values","title":"Shared Values","description":"Shared Values are among the fundamental concepts behind Reanimated.","sidebar":"docs"},"fundamentals/troubleshooting":{"id":"fundamentals/troubleshooting","title":"Troubleshooting common problems","description":"TypeError: Cannot convert undefined value to object on someVariable._closure","sidebar":"docs"},"fundamentals/web-support":{"id":"fundamentals/web-support","title":"Web Support","description":"It\'s possible to launch Reanimated in a web browser. For that case all of the functionalities are implemented purely in JavaScript, hence the efficiency of the animations might be lower.","sidebar":"docs"},"fundamentals/worklets":{"id":"fundamentals/worklets","title":"Worklets","description":"The ultimate goal of worklets was for them to define small pieces of JavaScript code that we run when updating view properties or reacting to events on the UI thread. A natural construct in JavaScript for such a purpose was a simple method. With Reanimated we spawn a secondary JS context on the UI thread that then is able to run JavaScript functions. The only thing that is needed is for that function to have the \u201cworklet\u201d directive at the top:","sidebar":"docs"},"guide/debugging":{"id":"guide/debugging","title":"Debugging worklets","description":"Due to Reanimated\'s unique architecture and usage of a second JS runtime, debugging","sidebar":"docs"},"guide/migration-from-1.x":{"id":"guide/migration-from-1.x","title":"Migrating from Reanimated 1.x to 2.x","description":"We wanted to make it possible to migrate from Reanimated 1 to Reanimated 2 incrementally.","sidebar":"docs"},"guide/migration-from-2.x":{"id":"guide/migration-from-2.x","title":"Migrating from Reanimated 2.x to 3.x","description":"Reanimated 3.x doesn\'t introduce any breaking changes between 2.x and 3.x in terms of the API. All the code you\'ve written in Reanimated v2 API works in 3.x without any changes. However, Reanimated 3.x drops the Reanimated v1 API entirely. For the migration guide between 1.x and 2.x versions please consult Migration from 1.x to 2.x.","sidebar":"docs"},"guide/testing":{"id":"guide/testing","title":"Testing with Jest","description":"Reanimated test mocks use web implementation of Reanimated2. Before you begin using Reanimated mocks you need some setup actions.","sidebar":"docs"},"tutorials/LayoutAnimations/layoutAnimations":{"id":"tutorials/LayoutAnimations/layoutAnimations","title":"How to easily animate your screens and components","description":"This tutorial will help you make your screens and components more smooth by adding animations.","sidebar":"docs"}}}')}}]);